{{!< ../layout}}
{{#contentFor "headScripts"}}

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/vue-good-table@2.18.1/dist/vue-good-table.min.css">

{{/contentFor}}
<h4>Deposits</h4>
<div id="app" class="col-lg-12">
  <order-component></order-component>
</div>
{{#contentFor "pageScripts"}}
 <script type="x-template" id="order-component">
   <div>
    <vue-good-table
      styleClass="vgt-table condensed"
      mode="remote"
      @on-row-dblclick="onRowDoubleClick"
      @on-page-change="onPageChange"
      @on-sort-change="onSortChange"
      @on-column-filter="onColumnFilter"
      @on-per-page-change="onPerPageChange"
      :pagination-options="{
        enabled: true,
      }"
      :totalRows="totalRows"
      :columns="columns"
      :rows="rows"/>
  </div>
 </script>
 <script src="//cdn.jsdelivr.net/npm/vue@2.6.11/dist/vue.min.js"></script>
 <script src="//cdn.jsdelivr.net/npm/vue-good-table@2.18.1/dist/vue-good-table.js"></script>
 <script>
   /*
   | Field               | Type                | Null | Key | Default | Extra          |
+---------------------+---------------------+------+-----+---------+----------------+
| EtsyDepositId       | bigint(20) unsigned | NO   | PRI | NULL    | auto_increment |
| DepositDate         | date                | YES  |     | NULL    |                |
| Amount              | decimal(6,2)        | YES  |     | 0.00    |                |
| Currency            | varchar(10)         | YES  |     | NULL    |                |
| Status              | varchar(12)         | YES  |     | NULL    |                |
| AccountEndingDigits | int(10)             | YES  |     | NULL    |                |
+---------------------+---------------------+------+-----+---------+----------------+
    */

   Vue.component('order-component', {
     template: '#order-component',
     delimiters: ['[[', ']]'],
     data: function () {
       return {
         columns:[
           {
             label: 'Deposit Date',
             field: 'DepositDate',
             type: 'date',
             dateInputFormat: "yyyy-MM-dd'T'HH:mm:ss.SSSxxx",
             dateOutputFormat: 'MMM. dd, yyyy',
           },
           {
             label: 'Amount',
             field: 'Amount',
             type: 'decimal'
           },
           {
             label: 'Currency',
             field: 'Currency'
           },
           {
             label: 'Status',
             field: 'Status'
           },
           {
             label: 'Ending Digits',
             field: 'AccountEndingDigits'
           }
         ],
         isLoading: false,
         serverParams: {
           columnFilters: {
           },
           sort: {
             field: '',
             type: '',
           },
           page: 1,
           perPage: 10
         },
         totalRows: {{{ toJSON data.totalRows }}},
         rows: {{{toJSON data.items }}}
       };
     },
     methods: {
       updateParams(newProps){
         console.log('updated this param: %o', this.serverParams);
         this.serverParams = Object.assign({}, this.serverParams, newProps);
         console.log('to this: %o', this.serverParams);
       },
       onPageChange(params){
         this.updateParams({page: params.currentPage});
         this.loadItems();
       },
       onPerPageChange(params){
         this.updateParams({perPage: params.currentPerPage});
         this.loadItems();
       },
       onSortChange(params){
         this.updateParams({
           page: 1,
           sort:[{
             type: params[0].type,
             field: params[0].field,
           }],
         });
         this.loadItems();
       },
       onColumnFilter(params){
         this.updateParams(params);
         this.loadItems();
       },
       onRowDoubleClick(params){
         //alert(JSON.stringify(params));
       },
       loadItems(){
         var self = this;
          getFromServer(this.serverParams).then(function(res){
            self.totalRows = res.totalRows;
            self.rows = res.rows;
          });
       },
     }
   });
   var app = new Vue({
     el: '#app',
     delimiters: ['[[', ']]'],
     data:{
       message:'Hello St Johns Monastery',
     },
   });


  function getFromServer(params){
    return new Promise(function(resolve, reject){
      console.log('params %o', params);
      const url = '/api/deposits';
      const options = {
        method: 'POST',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json;charset=UTF-8'
        },
        body: JSON.stringify(params)
      };

      fetch(url, options)
        .then(function(response){ return response.json();})
        .then(function(data){
          console.log(data);
          resolve({
            totalRows: data.totalRows,
            rows: data.rows
          });
        });
    });
  }

 </script>
{{/contentFor}}


